{{define "RenderOperationValidate"}}
    {{- $capsule := index . 0 -}}
    {{- $belongs := index . 1 -}}
    {{- $operation := index . 2 -}}

    {{- $opID := $operation.ID | camelCase -}}
    public String validateParam() throws QCException {
        {{- template "ValidateCustomizedType" $operation.Request.Query -}}
        {{- template "ValidateCustomizedType" $operation.Request.Headers -}}
        {{- template "ValidateCustomizedType" $operation.Request.Elements}}

        return null;
    }
{{end}}

{{define "ValidateCustomizedType"}}
{{- $customizedType := . -}}
{{- range $_, $property := $customizedType.Properties -}}
    {{- $isNormalType :=  (eq $property.Type "string") -}}
    {{- $isContentLength := eq $property.ID "Content-Length" -}}
    {{- if and $isNormalType (not $isContentLength) -}}
        {{- if $property.IsRequired }}
            if (QCStringUtil.isEmpty(this.get{{$property.ID | camelCase}}())) {
                throw new QCException("{{$property.ID | camelCase}} is required");
            }
        {{- end -}}
        {{- if gt ($property.Enum | len) 0 }}
            String[] {{$property.ID | camelCase | lowerFirst -}}
            ValidValues = {
                {{$property.Enum | commaConnectedWithQuote}}
            };

            boolean {{$property.ID | camelCase | lowerFirst}}IsValid = false;
            for (String v : {{$property.ID | camelCase | lowerFirst}}ValidValues) {
                if (v.equals(this.get{{$property.ID | camelCase}}())) {
                    {{$property.ID | camelCase | lowerFirst}}IsValid = true;
                }
                {{- if $property.IsRequired}}
                Boolean {{$property.ID | camelCase | lowerFirst}}IsRequired = Boolean.TRUE;
                {{- else}}
                Boolean {{$property.ID | camelCase | lowerFirst}}IsRequired = Boolean.FALSE;
                {{- end}}
                if ({{$property.ID | camelCase | lowerFirst}}IsRequired.equals(Boolean.FALSE) && this.get{{$property.ID | camelCase}}() == null) {
                    {{$property.ID | camelCase | lowerFirst}}IsValid = true;
                }
            }

            if (!{{$property.ID | camelCase | lowerFirst}}IsValid) {
                throw new QCException("{{$property.ID | camelCase}} value " + this.get{{$property.ID | camelCase}}() + "is invalid");
            }
        {{- end -}}
    {{- end -}}

    {{- $isNormalType := (eq $property.Type "integer") -}}
    {{- $isContentLength := eq $property.ID "Content-Length" -}}
    {{- if and $isNormalType (not $isContentLength) -}}
        {{- if $property.IsRequired }}
            if (this.get{{$property.ID | camelCase}}() < 0 ) {
                throw new QCException("{{$property.ID | camelCase}} is required");
            }
        {{- end -}}
        {{- if gt ($property.Enum | len) 0}}
            String[] {{- $property.ID | camelCase | lowerFirst -}}
            ValidValues = {
                {{- $property.Enum | commaConnectedWithQuote -}}
            };
            boolean {{$property.ID | camelCase | lowerFirst}}IsValid = false;
            for (String v : {{$property.ID | camelCase | lowerFirst}}ValidValues) {
                if (v.equals(this.get{{$property.ID | camelCase}}()+"")) {
                    {{$property.ID | camelCase | lowerFirst}}IsValid = true;
                }
                {{- if $property.IsRequired}}
                Boolean {{$property.ID | camelCase | lowerFirst}}IsRequired = Boolean.TRUE;
                {{- else}}
                Boolean {{$property.ID | camelCase | lowerFirst}}IsRequired = Boolean.FALSE;
                {{- end}}
                if ({{$property.ID | camelCase | lowerFirst}}IsRequired.equals(Boolean.FALSE) && this.get{{$property.ID | camelCase}}()==null) {
                    {{$property.ID | camelCase | lowerFirst}}IsValid = true;
                }
            }

            if (!{{$property.ID | camelCase | lowerFirst}}IsValid) {
                throw new QCException("{{$property.ID | camelCase}} value " + this.get{{$property.ID | camelCase}}() + "is invalid");
            }
        {{- end -}}
    {{- end -}}

    {{- if eq $property.Type "array" -}}
        {{- $isNotString := ne $property.ExtraType "string" -}}
        {{- $isNotInteger := ne $property.ExtraType "integer" -}}
        {{- $isNotTimestamp := ne $property.ExtraType "timestamp" -}}
        {{- if and $isNotString $isNotInteger $isNotTimestamp}}
            if (this.get{{- $property.ID | camelCase -}}() != null && this.get{{- $property.ID | camelCase -}}().size() > 0 ) {
                for (int i = 0 ; i < this.get{{- $property.ID | camelCase -}}().size(); i++ ) {
                    {{if eq $property.ExtraType "object"}}
                    String vValidate = (String)this.get{{$property.ID | camelCase}}().get(i);
                    {{else if eq $property.Type "map"}}
                    String vValidate = (String)this.get{{$property.ID | camelCase}}().get(i);
                    {{else}}
                    return null;
                    {{- end}}

                    //if (!QCStringUtil.isEmpty(vValidate)) {
                    //    return vValidate;
                    // }
                }
            }
        {{- end -}}
    {{- end -}}
{{- end -}}
{{- end -}}



{{define "RenderProperties"}}
    {{- $customizedType := index . 0 -}}
    {{- $PropertyExtraTags := index . 1 -}}
    {{- $PropertyTypes := index . 2 -}}

    {{- range $_, $property := $customizedType.Properties -}}
    	{{- if $property.Description}}
    	// {{$property.Description}}
    	{{- end}}
    	{{- if $property.Enum}}
    	// {{$property.ID | camelCase}}'s available values: {{$property.Enum | commaConnected}}
    	{{- end}}

    	{{- if $property.IsRequired}}
        // Required
        {{- end -}}

        {{- if eq $PropertyTypes "header" -}}
            {{- template "PropertyTagsHeader" $property -}}
        {{- else if eq $PropertyTypes "body" -}}
            {{- template "PropertyTagsBody" $property -}}
        {{- else -}}
            {{- template "PropertyTags" $property -}}
        {{- end -}}
    {{- end -}}
{{- end -}}





{{define "Type"}}
	{{- $typeName := . -}}

	{{- if eq $typeName "string" -}}
		String
	{{- else if eq $typeName "boolean" -}}
		Boolean
	{{- else if eq $typeName "integer" -}}
		Integer
	{{- else if eq $typeName "timestamp" -}}
		String
	{{- else if eq $typeName "binary" -}}
		File
	{{- else if eq $typeName "array" -}}
		List
	{{- else if eq $typeName "object" -}}
		Object
	{{- else if eq $typeName "map" -}}
		Map
	{{- else if eq $typeName "any" -}}
		interface{}
	{{- else -}}
		{{$typeName | camelCase}}Model
	{{- end -}}
{{end}}

{{define "PropertyType"}}
	{{- $property := . -}}

	{{- if eq $property.Type "object" -}}
		{{- template "Type" $property.ExtraType -}}
	{{- else if eq $property.Type "array" -}}
		List<{{- template "Type" $property.ExtraType -}}>
	{{- else if eq $property.Type "map" -}}
		Map
	{{- else if eq $property.Type "any" -}}
		{{- template "Type" $property.Type -}}
	{{- else -}}
		{{- template "Type" $property.Type -}}
	{{- end -}}
{{end}}

{{define "PropertyTags"}}
	{{- $property := .}}
        private {{template "PropertyType" $property}} {{$property.ID | camelCase | lowerFirst}};

        @JsonProperty(value = "{{$property.Name -}}")
        public void set{{- $property.ID | camelCase -}}({{template "PropertyType" $property}} {{$property.ID | camelCase | lowerFirst -}}) {
            this.{{- $property.Name | camelCase | lowerFirst}} = {{$property.ID | camelCase | lowerFirst -}};
        }

        @JsonProperty(value = "{{$property.Name -}}")
        public {{template "PropertyType" $property}} get{{- $property.ID | camelCase}}() {
            return this.{{- $property.ID | camelCase | lowerFirst}};
        }
{{end}}

{{define "PropertyTagsQuery"}}
	{{- $property := .}}
        private {{template "PropertyType" $property}} {{ $property.ID | camelCase | lowerFirst }};

        public void set{{- $property.ID | camelCase -}}({{template "PropertyType" $property}} {{$property.ID | camelCase | lowerFirst -}}) {
            this.{{- $property.Name | camelCase | lowerFirst}} = {{$property.ID | camelCase | lowerFirst -}};
        }

        @ParamAnnotation(paramType = "query", paramName = {{$property.Name | normalized -}})
        public {{template "PropertyType" $property}} get{{- $property.ID | camelCase}}() {
            return this.{{- $property.ID | camelCase | lowerFirst}};
        }
{{end}}


{{define "PropertyTagsBody"}}
	{{- $property := .}}
        private {{template "PropertyType" $property}} {{ $property.ID | camelCase | lowerFirst }};

        public void set{{- $property.ID | camelCase -}}({{template "PropertyType" $property}} {{$property.ID | camelCase | lowerFirst -}}) {
            this.{{- $property.Name | camelCase | lowerFirst}} = {{$property.ID | camelCase | lowerFirst -}};
        }

        @ParamAnnotation(paramType = "body", paramName = {{$property.Name | normalized -}})
        public {{template "PropertyType" $property}} get{{- $property.ID | camelCase}}() {
            return this.{{- $property.ID | camelCase | lowerFirst}};
        }
{{end}}


{{define "PropertyTagsHeader"}}
	{{- $property := .}}
        private {{template "PropertyType" $property}} {{ $property.ID | camelCase | lowerFirst }};

        public void set{{- $property.ID | camelCase -}}({{template "PropertyType" $property}} {{$property.ID | camelCase | lowerFirst -}}) {
            this.{{- $property.Name | camelCase | lowerFirst}} = {{$property.ID | camelCase | lowerFirst -}};
        }

        @ParamAnnotation(paramType = "header", paramName = {{$property.Name | normalized -}})
        public {{template "PropertyType" $property}} get{{- $property.ID | camelCase}}() {
            return this.{{- $property.ID | camelCase | lowerFirst}};
        }
{{end}}

{{define "PropertyExtraTags"}}
	{{- $PropertyExtraTags := . -}}
	{{- if $PropertyExtraTags -}}
		{{- printf " %s" $PropertyExtraTags -}}
	{{- end -}}
{{end}}


{{define "RenderOperation"}}
	{{- $belongs := index . 0 -}}
	{{- $operation := index . 1 -}}

	{{- $opID := $operation.ID | camelCase -}}

    {{- $hasParams := gt (len $operation.Request.Query.Properties) 0 -}}
    {{- $hasHeaders := gt (len $operation.Request.Headers.Properties) 0 -}}
    {{- $hasElements := gt (len $operation.Request.Elements.Properties) 0 -}}
    {{- $hasStringBody := eq $operation.Request.Body.Type "string" -}}
    {{- $hasBinaryBody := eq $operation.Request.Body.Type "binary" -}}
    {{- $hasInput := or $hasParams $hasHeaders $hasElements $hasStringBody $hasBinaryBody}}
    /**
      {{- if $hasInput}}
      * @param input Request parameters and headers in the class
      {{- end}}
      * @return {{$opID}}Output Response body and headers in the class
      * @throws QCException IOException or network error
      *
      * <a href={{$operation.DocumentationURL}}>Documentation URL</a>
      */
    @SuppressWarnings({"rawtypes", "unchecked"})
    public {{$opID}}Output {{$opID | camelCase | lowerFirst}}({{- if $hasInput -}}{{- $opID -}}Input input{{- end -}}) throws QCException {
        {{- if $hasInput}}
        if (input == null) {
            input = new {{$opID}}Input();
        }
        {{- else -}}
        IaasParamBody input = new IaasParamBody();
        {{- end}}
        Map context = new HashMap();
        context.put(QCConstant.ENV_CONTEXT_KEY, this.envContext);
        context.put("OperationName", "{{- $operation.ID -}}");
        context.put("APIName", "{{- $operation.ID -}}");
        context.put("ServiceName", "{{- $operation.Name -}}");
        context.put("RequestMethod", "{{- $operation.Request.Method -}}");
        context.put("RequestURI", "{{- $operation.Request.Path -}}");

        input.setAction("{{- $operation.ID -}}");
        if (QCStringUtil.isEmpty(this.zone)) {
            input.setZone(this.envContext.getZone());
        } else {
            input.setZone(this.zone);
        }

        Object backModel = ResourceRequestFactory.getResourceRequest().sendApiRequest(context, input, {{- $opID -}}Output.class);
        if(backModel != null){
            return ({{- $opID -}}Output)backModel;
        }
        return null;
    }

     /**
       {{- if $hasInput}}
       * @param input Request parameters and headers in the class
       {{- end}}
       * @param callback Response calls back when success
       * @throws QCException IOException or network error
       *
       * <a href={{$operation.DocumentationURL}}>Documentation URL</a>
       */
    @SuppressWarnings({"rawtypes", "unchecked"})
    public void {{$opID | camelCase | lowerFirst}}({{- if $hasInput -}}{{- $opID -}}Input input,{{- end}} ResponseCallBack<{{- camelCase $operation.ID -}}Output> callback) throws QCException {
        {{if $hasInput -}}
        if (input == null) {
            input = new {{$opID}}Input();
        }
        {{- else -}}
        IaasParamBody input = new IaasParamBody();
        {{- end}}
        Map context = new HashMap();
        context.put(QCConstant.ENV_CONTEXT_KEY, this.envContext);
        context.put("OperationName", "{{- $opID -}}");
        context.put("APIName", "{{- $opID -}}");
        context.put("ServiceName", "{{- $operation.Name -}}");
        context.put("RequestMethod", "{{- $operation.Request.Method -}}");
        context.put("RequestURI", "{{- $operation.Request.Path -}}");

        input.setAction("{{- camelCase $operation.ID -}}");
        if (QCStringUtil.isEmpty(this.zone)) {
            input.setZone(this.envContext.getZone());
        } else {
            input.setZone(this.zone);
        }

        if(callback == null) {
            throw new QCException("callback can't be null");
        }

        ResourceRequestFactory.getResourceRequest().sendApiRequestAsync(context,input,callback);
    }

    {{if $hasInput -}}
    public static class {{$opID -}}Input extends IaasParamBody {
    {{- if $operation.Request.Query.Properties | len -}}
        {{- $data := $operation.Request.Query -}}
        {{- template "RenderProperties" passThrough $data `` "query" -}}
    {{- end -}}

    {{- if $operation.Request.Headers.Properties | len -}}
        {{- $data := $operation.Request.Headers -}}
        {{- template "RenderProperties" passThrough $data `` "header" -}}
    {{- end -}}

    {{- if $operation.Request.Elements.Properties | len -}}

        {{if $operation.Request.Body.Description -}}
        // {{$operation.Request.Body.Description}}
        {{- end -}}
        private  String bodyInput;

        @ParamAnnotation(paramType = "body",paramName = "BodyInput")
        public String getBodyInput() {
           return bodyInput;
        }
        //Object json string
        public void setBodyInput(String bodyInput) {
            this.bodyInput=bodyInput;
        }

        {{- $data := $operation.Request.Elements -}}
        {{- template "RenderProperties" passThrough $data `` "body" -}}
    {{- end -}}

    {{- if eq $operation.Request.Body.Type "string" -}}
        {{- if $operation.Request.Body.Description -}}
        // {{$operation.Request.Body.Description}}
        {{- end}}
        private  String bodyInput;

        @ParamAnnotation(paramType = "body",paramName = "BodyInput")
        public String getBodyInput() {
           return bodyInput;
        }
        //Object json string
        public void setBodyInput(String bodyInput) {
            this.bodyInput=bodyInput;
        }
    {{- else if eq $operation.Request.Body.Type "binary" -}}
        {{- if $operation.Request.Body.Description -}}
        // {{$operation.Request.Body.Description}}
        {{- end}}
        private  File bodyInputFile;

        @ParamAnnotation(paramType = "body", paramName = "BodyInputFile")
        public File getBodyInputFile() {
           return bodyInputFile;
        }

        public void setBodyInputFile(File bodyInputFile) {
            this.bodyInputFile=bodyInputFile;
        }
        private  java.io.InputStream bodyInputStream;

        @ParamAnnotation(paramType = "body",paramName = "BodyInputStream")
        public java.io.InputStream getBodyInputStream() {
           return bodyInputStream;
        }
        public void setBodyInputStream(java.io.InputStream bodyInputStream) {
            this.bodyInputStream=bodyInputStream;
        }
    {{- end}}
        public String validateParam() throws QCException {
            {{- template "ValidateCustomizedType" $operation.Request.Query -}}
            {{- template "ValidateCustomizedType" $operation.Request.Headers -}}
            {{- template "ValidateCustomizedType" $operation.Request.Elements}}
            return null;
        }
    }
    {{- end}}

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static class {{$opID}}Output extends OutputModel {
        {{- range $_, $response := $operation.Responses}}
        {{- if eq $response.Body.Type "string" -}}
        {{- if $response.Body.Description}}
        // {{$response.Body.Description}}
        {{- end -}}
        private String bodyInput;

        @ParamAnnotation(paramType = "body",paramName = "BodyInput")
        public String getBodyInput() {
           return bodyInput;
        }
        //Object json string
        public void setBodyInput(String bodyInput) {
            this.bodyInput=bodyInput;
        }
        {{- else if eq $response.Body.Type "binary" -}}
        {{- if $response.Body.Description -}}
        // {{$response.Body.Description}}
        {{- end -}}
        private java.io.InputStream bodyInputStream;

        @ParamAnnotation(paramType = "body", paramName = "BodyInputStream")
        public java.io.InputStream getBodyInputStream() {
           return bodyInputStream;
        }
        public void setBodyInputStream(java.io.InputStream bodyInputStream) {
            this.bodyInputStream=bodyInputStream;
        }
        {{- end}}

        {{- if $response.Elements.Properties | len -}}
            {{- $data := $response.Elements -}}
            {{- template "RenderProperties" passThrough $data `` "query" -}}
        {{- end -}}

        {{- if $response.Headers.Properties | len -}}
            {{- $data := $response.Headers -}}
            {{- template "RenderProperties" passThrough $data `` "header" -}}
        {{- end}}
        {{- end}}
    }
{{- end -}}
